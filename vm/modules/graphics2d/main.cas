Img = {
  (this.texture, this.x = 0, this.y = 0, width = -1, height = -1) {
    this.width = width == -1 ? texture.width : width
    this.height = height == -1 ? texture.height : height 
  }

	map(fileName, cellXQuantity = 1, cellYQuantity = 1) {
		let texture = external.texture.load(fileName, 1)
		let cellWidth = texture.width / cellXQuantity
		let cellHeight = texture.height / cellYQuantity
		let imageList = List(cellXQuantity * cellYQuantity)
		let index = 0
		for(y = 0 ..< cellYQuantity) {
			for(x = 0 ..< cellXQuantity) {
				imageList[index] = Img(texture, x * cellWidth, y * cellHeight, cellWidth, cellHeight)
				index++
			}
		}
		return imageList
	}
	
	draw(x, y) {
		this.texture.draw(x, y, this.x, this.y, this.width, this.height)
	}
}


Layer = {
  list: []
  onFirstCollision(x, y, function) {
    for(object in this.list) {
      if(object.onFirstCollision(x, y, function)) return true
    }
  }
	
	draw() {
		for(object in this.list) object.draw()
	}
}


Sprite = {
  (this.image, this.x, this.y, width = -1, height = -1) {
    this.halfWidth = (width == -1 ? this.image.width : width) / 2
    this.halfHeight = (height == -1 ? this.image.height : height) / 2
  }
  
  onFirstCollision(x, y, function) {
    if(abs(this.x - x) < this.halfWidth && abs(this.y - y) < this.halfHeight) {
      function(object)
      return true
    }
  }
  
  draw() {
    this.image.draw(this.x - this.halfWidth, this.y - this.halfHeight / 2)
  }
}


Tilemap = {
	(this.cellXQuantity, this.cellYQuantity, this.images, tileNumber = 0) {
		this.tilesQuantity = this.images.length
		this.cellWidth = this.images[0].width
		this.cellHeight = this.images[0].height
		this.tiles = List(cellXQuantity * cellYQuantity, tileNumber)
	}
	
	draw(x = 0, y = 0) {
		for(tileY = 0 ..< this.cellYQuantity) {
			for(tileX = 0 ..< this.cellXQuantity) {
				this.images[this.tiles[tileX + tileY * this.cellXQuantity]]
						.draw(x + tileX * this.cellWidth, y + tileY * this.cellHeight)
			}
		}
	}
	
	getTile(cellX, cellY) -> this.tiles[cellX + cellY * this.cellXQuantity]
	
	setTile(cellX, cellY, tileNumber) {
		this.tiles[cellX + cellY * this.cellXQuantity] = tileNumber
	}
	
	getTileX(screenX) -> screenX / this.cellWidth
	getTileY(screenY) -> screenY / this.cellHeight
}